# Radon language

union Option =
  Some(x: Int32)
  None

# Specialization

# union Either<'l, 'r> =
#   Left(value: 'l)
#   Right(value: 'r)
# 
# val x: Either<String, Int> = Left("Hello")

# Generates con Either$String$Int :: String => $Left 
# Generates con Int => Either$String$Int$Right
# Generates enum Either$Tag { Left = 0; Right = 1 }
# Generates 

struct Testing =
  someField: Int32

main(argc: Int32, argv: String): Int32 =
  #val x: Option = Some(10)
  #val z: Int32 = match(x):
  #  case Some(x) = x
  #  case None    = 0

  Console::printf("Hello %s!\n", "World")
  Console::putchar('a')
  return 0
