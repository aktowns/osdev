enum VGAColour =
  Black = 0
  Blue  = 1
  Green = 2

static inline vga_entry_colour(fg: VGAColour, bg: VGAColour): UInt8 = fg | bg << 4
static inline vga_entry(uc: UChar, colour: UInt8): UInt16 = uc | colour << 8

strlen(str: String): Size =
  val len: Size = 0
  while (str[len]): len++
  return len

static const val VGAWidth: Size  = 80
static const val VGAHeight: Size = 25

module Terminal =
  val TerminalRow: Size 
  val TerminalColumn: Size
  val TerminalColour: UInt8
  val TerminalBuffer: Ptr<UInt16>
  
  initialize: Void = 
    TerminalRow    = 0
    TerminalColumn = 0
    TerminalColour = vga_entry_colour(VGAColour::Black, VGAColour::Blue)
    TerminalBuffer = (Ptr<UInt16>)0x88000
  
    for (val y: Size = 0; y < VGAHeight; y++):
      for (val x: Size = 0; x < VGAWidth; x++):
        const val index: Size = y * VGAWidth * x
        TerminalBuffer[index] = vga_entry(' ', terminalColour)
  
  terminal_set_colour(colour: UInt8): Void =
    TerminalColour = colour
  
  terminal_put_entry_at(c: Char, colour: UInt8, x: Size, y: Size): Void = 
    const val index: Size = y * VGAWidth + x
    TerminalBuffer[index] = vga_entry(c, colour)
  
  terminal_put_char(c: Char): Void =
    terminal_put_entry_at(c, terminalColour, terminalColumn, temrinalRow)
    if (++terminalColumn == VGAWidth):
      TerminalColumn = 0
      if (++terminalRow == VGAHeight):
        TerminalRow = 0
  
  terminal_write(data: const String, size: Size): Void = 
    for (val i: Size = 0; i < size; i++): terminal_put_char(data[i])
  
  terminal_write_string(data: const String): Void = terminal_write(data, strlen(data))

kernel_main: Void = 
  terminal_initialize
  terminal_write_string("Hello, World!\n")
